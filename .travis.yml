# Use Dockerized infrastructure
sudo: false
language: python
# Cache our Gcloud SDK between commands
python:
  - "3.7-dev"  # 3.7 development branch
cache:
  directories:
  - "$HOME/google-cloud-sdk/"
env:
# Make sure gcloud command is on our PATH and the App Engine SDK is in the Python path
- GAE_PYTHONPATH=${HOME}/.cache/google_appengine PATH=$PATH:${HOME}/google-cloud-sdk/bin PYTHONPATH=${PYTHONPATH}:${GAE_PYTHONPATH} CLOUDSDK_CORE_DISABLE_PROMPTS=1
before_install:
# Install Google App Engine Python SDK
- if [ ! -d "${GAE_PYTHONPATH}" ]; then
    pwd
    python3 PHASE_1/TestScripts/fetch_gae_sdk.py $(dirname "${GAE_PYTHONPATH}");
  fi
# [START auth]
# Decrypt the credentials we added to the repo using the key we added with the Travis command line tool
- openssl aes-256-cbc -K $encrypted_c6f649e554dd_key -iv $encrypted_c6f649e554dd_iv -in PHASE_1/TestScripts/credentials.tar.gz.enc -out credentials.tar.gz -d
# If the SDK is not already cached, download it and unpack it
- if [ ! -d ${HOME}/google-cloud-sdk ]; then
     curl https://sdk.cloud.google.com | bash;
  fi
- tar -xzf credentials.tar.gz
- mkdir -p lib
# Here we use the decrypted service account credentials to authenticate the command line tool
- gcloud auth activate-service-account --key-file client-secret.json

- pip install -r PHASE_1/API_SourceCode/requirements.txt -t lib/

deploy:
  provider: gae
  skip_cleanup: true # Skip cleanup so api_key.py and vendored dependencies are still there
  keyfile: client-secret.json
  project: epiproapp
  config: PHASE_1/API_SourceCode/app.yaml
  default: true  # default project app version
  on: production-api-v1
script:
- python3 PHASE_1/TestScripts/e2e_test.py
